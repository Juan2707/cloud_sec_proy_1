{"ast":null,"code":"var _jsxFileName = \"C:\\\\2025\\\\seguridad cloud\\\\ProyectoSecCloud1\\\\blog_platform_front\\\\src\\\\views\\\\Feed\\\\Feed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Post from '../../components/Post';\n//Aqui iria el import de la api\nimport { get_all_public_posts, get_my_user, get_all_tags, get_posts_by_tags } from '../../services/Api';\nimport { useAuth } from '../../components/AuthContext';\nimport Tag from '../../components/Tag';\nimport './Feed.css';\nimport { getRemovedTags, getSelectedTags, clearRemovedTags, clearSelectedTags } from '../../services/DataInterface';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Feed() {\n  _s();\n  const location = useLocation();\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  const [trigger, setTrigger] = useState(false);\n  const [user_id, setUser_id] = useState('');\n  const [tags, setTags] = useState([]);\n  useEffect(() => {\n    const cargarTags = async () => {\n      try {\n        const data = await get_all_tags(user.access_token);\n        setTags(data.data);\n      } catch (error) {\n        console.error('Error fetching tags', error);\n        if (error.response.status === 401) {\n          navigate('/login');\n        }\n      }\n    };\n    cargarTags();\n    const cargarPosts = async () => {\n      try {\n        let data;\n        if (getSelectedTags().length > 0) {\n          const response = await get_posts_by_tags(getSelectedTags(), user.access_token);\n          if (response.error) throw new Error(\"Failed to fetch posts\");\n          data = response.data;\n          setPosts(data || []); // Asumir que podría no haber datos.\n        } else {\n          const response = await get_all_public_posts(user.access_token);\n          if (response.error) throw new Error(\"Failed to fetch public posts\");\n          data = response.data;\n          setPosts(data || []);\n        }\n        const userInfoResponse = await get_my_user(user.access_token);\n        if (userInfoResponse.error) throw new Error(\"Failed to fetch user info\");\n        const userInfo = userInfoResponse.data;\n        setUser_id(userInfo.id);\n      } catch (error) {\n        console.error('Error fetching data', error);\n        if (error.response && error.response.status === 401) {\n          navigate('/login');\n        } else {\n          // Añade manejo de otros tipos de errores, posiblemente mostrando un mensaje al usuario.\n          alert(\"An error occurred while fetching data.\");\n        }\n      }\n    };\n    cargarPosts();\n  }, [trigger]);\n  //Revisar post conexion con api, el delete es con backend, debe haber una forma de solo hacer refresh de la pagina\n\n  const refresh = () => {\n    setTrigger(!trigger);\n  };\n  const onClickButton = route => {\n    clearRemovedTags();\n    clearSelectedTags();\n    navigate(route);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed-grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feed-tag\",\n        children: tags.map(tag => /*#__PURE__*/_jsxDEV(Tag, {\n          ...tag,\n          onChange: refresh\n        }, tag.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Feed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        data: post,\n        onRefresh: refresh\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-profile\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onClickButton(`/myprofile/${user_id}`),\n        children: \"My Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onClickButton('/create'),\n        children: \"Crear Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(Feed, \"kEbdamL7kbIUcbp4EqG0dU16qbc=\", false, function () {\n  return [useLocation, useAuth, useNavigate];\n});\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","Post","get_all_public_posts","get_my_user","get_all_tags","get_posts_by_tags","useAuth","Tag","getRemovedTags","getSelectedTags","clearRemovedTags","clearSelectedTags","jsxDEV","_jsxDEV","Feed","_s","location","user","navigate","posts","setPosts","trigger","setTrigger","user_id","setUser_id","tags","setTags","cargarTags","data","access_token","error","console","response","status","cargarPosts","length","Error","userInfoResponse","userInfo","id","alert","refresh","onClickButton","route","className","children","map","tag","onChange","fileName","_jsxFileName","lineNumber","columnNumber","post","onRefresh","onClick","_c","$RefreshReg$"],"sources":["C:/2025/seguridad cloud/ProyectoSecCloud1/blog_platform_front/src/views/Feed/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Post from '../../components/Post';\r\n//Aqui iria el import de la api\r\nimport { get_all_public_posts, get_my_user, get_all_tags, get_posts_by_tags } from '../../services/Api';\r\nimport { useAuth } from '../../components/AuthContext';\r\nimport Tag from '../../components/Tag';\r\nimport './Feed.css';\r\nimport { getRemovedTags, getSelectedTags, clearRemovedTags, clearSelectedTags } from '../../services/DataInterface';\r\n\r\n\r\n\r\nfunction Feed() {\r\n  const location = useLocation();\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [posts, setPosts] = useState([]);\r\n  const [trigger, setTrigger] = useState(false);\r\n  const [user_id, setUser_id] = useState('');\r\n  const [tags, setTags] = useState([]);\r\n  \r\n  useEffect(() =>{\r\n    const cargarTags = async() =>{\r\n      try{\r\n        const data = await get_all_tags(user.access_token);\r\n        setTags(data.data);\r\n      }\r\n      catch(error){\r\n        console.error('Error fetching tags', error);\r\n        if(error.response.status === 401){\r\n          navigate('/login');\r\n        }\r\n      }\r\n    }\r\n    cargarTags();\r\n    const cargarPosts = async() => {\r\n      try {\r\n        \r\n        let data;\r\n        if (getSelectedTags().length > 0) {\r\n          const response = await get_posts_by_tags(getSelectedTags(), user.access_token);\r\n          if (response.error) throw new Error(\"Failed to fetch posts\");\r\n          data = response.data;\r\n          setPosts(data || []); // Asumir que podría no haber datos.\r\n        } else {\r\n          const response = await get_all_public_posts(user.access_token);\r\n          if (response.error) throw new Error(\"Failed to fetch public posts\");\r\n          data = response.data;\r\n          setPosts(data || []);\r\n        }\r\n    \r\n        const userInfoResponse = await get_my_user(user.access_token);\r\n        if (userInfoResponse.error) throw new Error(\"Failed to fetch user info\");\r\n        const userInfo = userInfoResponse.data;\r\n        setUser_id(userInfo.id);\r\n      } catch (error) {\r\n        console.error('Error fetching data', error);\r\n        if (error.response && error.response.status === 401) {\r\n          navigate('/login');\r\n        } else {\r\n          // Añade manejo de otros tipos de errores, posiblemente mostrando un mensaje al usuario.\r\n          alert(\"An error occurred while fetching data.\");\r\n        }\r\n      }\r\n    };\r\n\r\n    cargarPosts();\r\n  },[trigger]);\r\n  //Revisar post conexion con api, el delete es con backend, debe haber una forma de solo hacer refresh de la pagina\r\n\r\n  const refresh = () =>{\r\n    setTrigger(!trigger);\r\n  }\r\n\r\n  const onClickButton= (route)=>{\r\n    clearRemovedTags();\r\n    clearSelectedTags();\r\n    navigate(route);\r\n  }\r\n\r\n  return (\r\n    <div className='feed-grid-container'>\r\n    <div className='feed-container'>\r\n      <div className='feed-tag'>\r\n      {tags.map(tag => (\r\n          <Tag key={tag.id} {...tag} onChange={refresh}/>\r\n        ))}\r\n      </div>\r\n      \r\n      \r\n      <h1>Feed</h1>\r\n      {posts.map((post) => (\r\n        <Post key={post.id} data={post} onRefresh={refresh}/>\r\n      ))}\r\n      \r\n    </div>\r\n    <div className='feed-profile'>\r\n    <button onClick={() => onClickButton(`/myprofile/${user_id}`)}>My Profile</button>\r\n    <button onClick={() => onClickButton('/create')}>Crear Post</button>\r\n      </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}