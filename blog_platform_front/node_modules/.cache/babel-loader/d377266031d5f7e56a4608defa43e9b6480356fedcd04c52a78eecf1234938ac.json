{"ast":null,"code":"var _jsxFileName = \"C:\\\\2025\\\\seguridad cloud\\\\ProyectoSecCloud1\\\\blog_platform_front\\\\src\\\\views\\\\Feed\\\\Feed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Post from '../../components/Post';\n//Aqui iria el import de la api\nimport { getPosts } from '../../services/Api';\nimport { useAuth } from '../../components/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Feed() {\n  _s();\n  const location = useLocation();\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const cargarPosts = async () => {\n      try {\n        const data = await getPosts(user.token);\n        setPosts(data.data);\n      } catch (error) {\n        console.error('Error fetching posts', error);\n        if (error.response.status === 401) {\n          navigate('/login');\n        }\n      }\n    };\n    cargarPosts();\n  }, [location]);\n  //Revisar post conexion con api, el delete es con backend, debe haber una forma de solo hacer refresh de la pagina\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      ...post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/create'),\n      children: \"Crear Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(Feed, \"oIAmibcqcE8Ft7grZ6dAoZSkj5k=\", false, function () {\n  return [useLocation, useAuth, useNavigate];\n});\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","Post","getPosts","useAuth","jsxDEV","_jsxDEV","Feed","_s","location","user","navigate","posts","setPosts","cargarPosts","data","token","error","console","response","status","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","id","onClick","_c","$RefreshReg$"],"sources":["C:/2025/seguridad cloud/ProyectoSecCloud1/blog_platform_front/src/views/Feed/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Post from '../../components/Post';\r\n//Aqui iria el import de la api\r\nimport { getPosts } from '../../services/Api';\r\nimport { useAuth } from '../../components/AuthContext';\r\n\r\n\r\n\r\nfunction Feed() {\r\n  const location = useLocation();\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [posts, setPosts] = useState([]);\r\n  \r\n  useEffect(() =>{\r\n    const cargarPosts = async() =>{\r\n      try{\r\n        const data = await getPosts(user.token);\r\n        setPosts(data.data);\r\n      }\r\n      catch(error){\r\n        console.error('Error fetching posts', error);\r\n        if(error.response.status === 401){\r\n          navigate('/login');\r\n        }\r\n      }\r\n    };\r\n\r\n    cargarPosts();\r\n  },[location]);\r\n  //Revisar post conexion con api, el delete es con backend, debe haber una forma de solo hacer refresh de la pagina\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Feed</h1>\r\n      {posts.map(post => (\r\n        <Post key={post.id} {...post} />\r\n      ))}\r\n      <button onClick={() => navigate('/create')}>Crear Post</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,IAAI,MAAM,uBAAuB;AACxC;AACA,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,OAAO,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIvD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAES;EAAK,CAAC,GAAGN,OAAO,CAAC,CAAC;EAC1B,MAAMO,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAK;IACb,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAU;MAC5B,IAAG;QACD,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACO,IAAI,CAACM,KAAK,CAAC;QACvCH,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;MACrB,CAAC,CACD,OAAME,KAAK,EAAC;QACVC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,IAAGA,KAAK,CAACE,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;UAC/BT,QAAQ,CAAC,QAAQ,CAAC;QACpB;MACF;IACF,CAAC;IAEDG,WAAW,CAAC,CAAC;EACf,CAAC,EAAC,CAACL,QAAQ,CAAC,CAAC;EACb;;EAGA,oBACEH,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACZb,KAAK,CAACc,GAAG,CAACC,IAAI,iBACbrB,OAAA,CAACJ,IAAI;MAAA,GAAmByB;IAAI,GAAjBA,IAAI,CAACC,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAChC,CAAC,eACFnB,OAAA;MAAQuB,OAAO,EAAEA,CAAA,KAAMlB,QAAQ,CAAC,SAAS,CAAE;MAAAU,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV;AAACjB,EAAA,CAlCQD,IAAI;EAAA,QACMN,WAAW,EACXG,OAAO,EACPJ,WAAW;AAAA;AAAA8B,EAAA,GAHrBvB,IAAI;AAoCb,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}