{"ast":null,"code":"const BASE_URL = \"http://127.0.0.1:8000\";\n\n//Incorporated\nexport const register = async (email, username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/user`, {\n      method: 'POST',\n      body: JSON.stringify({\n        email: email,\n        username: username,\n        password: password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error desconocido en el registro'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error en el registro ', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Incorporated\nexport const login = async (email, password) => {\n  try {\n    const params = new URLSearchParams();\n    params.append('username', email);\n    params.append('password', password);\n    const response = await fetch(`${BASE_URL}/token`, {\n      method: 'POST',\n      //aqui el body es x-www-form-urlencoded con Key username y Key password con los valores necesarios para el login\n      body: params,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error en el login'\n      };\n    }\n    localStorage.setItem('token', data.token);\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error en el login', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const get_user = async (id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/user/${id}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener el usuario'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener el usuario', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const get_my_user = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/myuser`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener el usuario'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener el usuario', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n\n//Incorporated\nexport const newPost = async (title, content, isPrivate, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post`, {\n      method: 'POST',\n      body: JSON.stringify({\n        title: title,\n        content: content,\n        private: isPrivate\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al crear el post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al crear el post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const makePostPublic = async (post_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}/public`, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al hacer público el post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al hacer público el post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const makePostPrivate = async (post_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}/private`, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al hacer privado el post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al hacer privado el post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const getPostsByUser = async (author_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/user/${author_id}/posts`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener los posts'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener los posts', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Aún no get_all posts por que nadie tiene acceso a todos los posts\n//Incorporated\nexport const get_all_public_posts = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/public`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener los posts'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener los posts', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const get_single_post = async (post_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener el post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener el post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const edit_post = async (post_id, title, content, isPrivate, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        title: title,\n        content: content,\n        private: isPrivate\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al editar el post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al editar el post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const delete_post = async (post_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al eliminar el post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al eliminar el post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Incorporated\nexport const calificate_post = async (post_id, calification, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/calificate`, {\n      method: 'POST',\n      body: JSON.stringify({\n        post_id: post_id,\n        calification: calification\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al calificar el post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al calificar el post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Incorporated\nexport const get_my_calification_on_post = async (post_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/calificate/${post_id}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener la calificación'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener la calificación', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const get_post_with_calification = async (post_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/post/${post_id}/calification`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener la calificación'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener la calificación', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Incorporated\nexport const update_calification = async (calification_id, post_id, calification, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/calificate/${calification_id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        post_id: post_id,\n        calification: calification\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al actualizar la calificación'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al actualizar la calificación', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const delete_calification = async (calification_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/calificate/${calification_id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al eliminar la calificación'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al eliminar la calificación', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Incorporated\nexport const create_tag = async (tag, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tag`, {\n      method: 'POST',\n      body: JSON.stringify({\n        name: tag\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al crear el tag'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al crear el tag', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Incorporated\nexport const get_all_tags = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/tags`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener los tags'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener los tags', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const get_tag = async (tag_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tag/${tag_id}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener el tag'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener el tag', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Incorporated\nexport const link_tag_to_post = async (post_id, tag_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tag/post`, {\n      method: 'POST',\n      body: JSON.stringify({\n        post_id: post_id,\n        tag_id: tag_id\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al vincular el tag al post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al vincular el tag al post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const unlink_tag_from_post = async (post_id, tag_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tag/${tag_id}/post/${post_id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al desvincular el tag del post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al desvincular el tag del post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\n//Incorporated\nexport const get_tags_by_post = async (post_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tag/post/${post_id}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener los tags del post'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener los tags del post', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const get_posts_by_tag = async (tag_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tag/${tag_id}/posts`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener los posts del tag'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener los posts del tag', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};\nexport const get_from_user_posts_by_tag = async (author_id, tag_id, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/user/${author_id}/posts/tag/${tag_id}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        error: true,\n        message: data.detail || 'Error al obtener los posts del tag'\n      };\n    }\n    return {\n      error: false,\n      data\n    };\n  } catch (error) {\n    console.error('Error al obtener los posts del tag', error);\n    return {\n      error: true,\n      message: 'Error de conexión o problema en el servidor'\n    };\n  }\n};","map":{"version":3,"names":["BASE_URL","register","email","username","password","response","fetch","method","body","JSON","stringify","headers","data","json","ok","error","message","detail","console","login","params","URLSearchParams","append","localStorage","setItem","token","get_user","id","get_my_user","newPost","title","content","isPrivate","private","makePostPublic","post_id","makePostPrivate","getPostsByUser","author_id","get_all_public_posts","get_single_post","edit_post","delete_post","calificate_post","calification","get_my_calification_on_post","get_post_with_calification","update_calification","calification_id","delete_calification","create_tag","tag","name","get_all_tags","get_tag","tag_id","link_tag_to_post","unlink_tag_from_post","get_tags_by_post","get_posts_by_tag","get_from_user_posts_by_tag"],"sources":["C:/2025/seguridad cloud/ProyectoSecCloud1/blog_platform_front/src/services/Api.js"],"sourcesContent":["const BASE_URL = \"http://127.0.0.1:8000\";\r\n\r\n\r\n//Incorporated\r\nexport const register =  async (email, username, password) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/user`,{\r\n            method: 'POST',\r\n            body: JSON.stringify({email:email, username:username, password:password}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        \r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error desconocido en el registro' };\r\n        }\r\n        return { error: false, data };\r\n    }   \r\n    catch(error){\r\n        console.error('Error en el registro ', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n};\r\n//Incorporated\r\nexport const login = async (email, password) => {\r\n    try{\r\n        const params = new URLSearchParams();\r\n        params.append('username', email);\r\n        params.append('password', password);\r\n        const response = await fetch(`${BASE_URL}/token`,{\r\n            method: 'POST',\r\n            //aqui el body es x-www-form-urlencoded con Key username y Key password con los valores necesarios para el login\r\n            body: params,\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            }\r\n        });\r\n        \r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error en el login' };\r\n        }\r\n        localStorage.setItem('token', data.token);\r\n        return { error: false, data };\r\n    } catch(error){\r\n        console.error('Error en el login', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const get_user = async (id,token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/user/${id}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener el usuario' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener el usuario', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n\r\n}\r\n\r\nexport const get_my_user = async (token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/myuser`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener el usuario' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener el usuario', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\n//Incorporated\r\nexport const newPost = async (title, content, isPrivate, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post`,{\r\n            method: 'POST',\r\n            body: JSON.stringify({title: title, content: content, private: isPrivate}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al crear el post' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al crear el post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const makePostPublic = async (post_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post/${post_id}/public`,{\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al hacer público el post' };\r\n        }\r\n        return { error: false, data };\r\n\r\n    }\r\n    catch(error){\r\n        console.error('Error al hacer público el post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const makePostPrivate = async (post_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post/${post_id}/private`,{\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al hacer privado el post' };\r\n        }\r\n        return { error: false, data };\r\n\r\n    }\r\n    catch(error){\r\n        console.error('Error al hacer privado el post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const getPostsByUser = async (author_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post/user/${author_id}/posts`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener los posts' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener los posts', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n//Aún no get_all posts por que nadie tiene acceso a todos los posts\r\n//Incorporated\r\nexport const get_all_public_posts = async (token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post/public`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener los posts' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener los posts', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const get_single_post = async (post_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post/${post_id}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener el post' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener el post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const edit_post = async (post_id, title, content, isPrivate, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post/${post_id}`,{\r\n            method: 'PATCH',\r\n            body: JSON.stringify({title: title, content: content, private: isPrivate}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al editar el post' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al editar el post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const delete_post = async (post_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post/${post_id}`,{\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al eliminar el post' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al eliminar el post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n//Incorporated\r\nexport const calificate_post = async (post_id, calification, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/calificate`,{\r\n            method: 'POST',\r\n            body: JSON.stringify({post_id: post_id, calification: calification}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al calificar el post' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al calificar el post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n//Incorporated\r\nexport const get_my_calification_on_post = async(post_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/calificate/${post_id}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener la calificación' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener la calificación', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const get_post_with_calification = async(post_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/post/${post_id}/calification`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener la calificación' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener la calificación', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n//Incorporated\r\nexport const update_calification = async(calification_id, post_id, calification, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/calificate/${calification_id}`,{\r\n            method: 'PATCH',\r\n            body: JSON.stringify({post_id: post_id, calification: calification}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al actualizar la calificación' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al actualizar la calificación', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const delete_calification = async(calification_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/calificate/${calification_id}`,{\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al eliminar la calificación' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al eliminar la calificación', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n//Incorporated\r\nexport const create_tag = async(tag, token) => {\r\n\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/tag`,{\r\n            method: 'POST',\r\n            body: JSON.stringify({name: tag}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al crear el tag' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al crear el tag', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n//Incorporated\r\nexport const get_all_tags = async(token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/tags`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener los tags' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener los tags', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const get_tag = async(tag_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/tag/${tag_id}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener el tag' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener el tag', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n//Incorporated\r\nexport const link_tag_to_post = async(post_id, tag_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/tag/post`,{\r\n            method: 'POST',\r\n            body: JSON.stringify({post_id: post_id, tag_id: tag_id}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al vincular el tag al post' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al vincular el tag al post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const unlink_tag_from_post = async(post_id, tag_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/tag/${tag_id}/post/${post_id}`,{\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }); \r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al desvincular el tag del post' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al desvincular el tag del post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n//Incorporated\r\nexport const get_tags_by_post = async(post_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/tag/post/${post_id}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener los tags del post' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener los tags del post', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const get_posts_by_tag = async(tag_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/tag/${tag_id}/posts`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener los posts del tag' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener los posts del tag', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}\r\n\r\nexport const get_from_user_posts_by_tag = async(author_id, tag_id, token) => {\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/user/${author_id}/posts/tag/${tag_id}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const data = await response.json();\r\n        if(!response.ok){\r\n            return { error: true, message: data.detail || 'Error al obtener los posts del tag' };\r\n        }\r\n        return { error: false, data };\r\n    }\r\n    catch(error){\r\n        console.error('Error al obtener los posts del tag', error);\r\n        return { error: true, message: 'Error de conexión o problema en el servidor' };\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}