{"ast":null,"code":"\n/*\r\n\r\nEn este componente, se simula la edición de un post. Se obtiene el ID del post desde la URL y se simula la carga de los datos del post a editar. Se muestra un formulario con los campos del post y un botón para enviar los datos actualizados al backend. Al enviar el formulario, se redirige al feed principal.\r\nfin del comentario.\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport TagCreation from '../components/TagCreation';\r\n\r\nfunction EditPost() {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n  const [tags, setTags] = useState([]);\r\n  const { postId } = useParams(); // Obtiene el ID del post desde la URL\r\n  const navigate = useNavigate();\r\n\r\n  const handleTagsChange = (selectedTags) => {\r\n    setTags(selectedTags);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Simulación de carga de datos del post para editar\r\n    // Esto debería reemplazarse con una llamada a la API para obtener los datos reales del post\r\n    setTitle(\"Existing Title\");\r\n    setContent(\"Existing content here...\");\r\n    setAuthor(\"Author Name\");\r\n    setTags(\"tag1, tag2\");\r\n  }, [postId]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Lógica para enviar los datos actualizados al backend\r\n    console.log('Editing post with:', title, content, author, tags);\r\n    navigate('/feed'); // Redirige al feed principal tras actualizar el post\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Edit Post</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Title:\r\n          <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Content:\r\n          <textarea value={content} onChange={(e) => setContent(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Author:\r\n          <input type=\"text\" value={author} onChange={(e) => setAuthor(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Tags:\r\n          <input type=\"text\" value={tags} onChange={(e) => setTags(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <TagCreation tags={tags} onTagsChange={handleTagsChange} />\r\n        <button type=\"submit\">Update Post</button>\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditPost;\r\n\r\n*/","map":{"version":3,"names":[],"sources":["C:/2025/seguridad cloud/ProyectoSecCloud1/blog_platform_front/src/views/EditPost.js"],"sourcesContent":["\r\n/*\r\n\r\nEn este componente, se simula la edición de un post. Se obtiene el ID del post desde la URL y se simula la carga de los datos del post a editar. Se muestra un formulario con los campos del post y un botón para enviar los datos actualizados al backend. Al enviar el formulario, se redirige al feed principal.\r\nfin del comentario.\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport TagCreation from '../components/TagCreation';\r\n\r\nfunction EditPost() {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n  const [tags, setTags] = useState([]);\r\n  const { postId } = useParams(); // Obtiene el ID del post desde la URL\r\n  const navigate = useNavigate();\r\n\r\n  const handleTagsChange = (selectedTags) => {\r\n    setTags(selectedTags);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Simulación de carga de datos del post para editar\r\n    // Esto debería reemplazarse con una llamada a la API para obtener los datos reales del post\r\n    setTitle(\"Existing Title\");\r\n    setContent(\"Existing content here...\");\r\n    setAuthor(\"Author Name\");\r\n    setTags(\"tag1, tag2\");\r\n  }, [postId]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Lógica para enviar los datos actualizados al backend\r\n    console.log('Editing post with:', title, content, author, tags);\r\n    navigate('/feed'); // Redirige al feed principal tras actualizar el post\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Edit Post</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Title:\r\n          <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Content:\r\n          <textarea value={content} onChange={(e) => setContent(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Author:\r\n          <input type=\"text\" value={author} onChange={(e) => setAuthor(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Tags:\r\n          <input type=\"text\" value={tags} onChange={(e) => setTags(e.target.value)} />\r\n        </label>\r\n        <br />\r\n        <TagCreation tags={tags} onTagsChange={handleTagsChange} />\r\n        <button type=\"submit\">Update Post</button>\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditPost;\r\n\r\n*/"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}